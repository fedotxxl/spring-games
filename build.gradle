import groovy.io.FileType
import groovy.json.JsonOutput
import org.apache.commons.io.FilenameUtils

apply plugin: 'java'
apply plugin: 'idea'

buildscript{
    repositories{
        mavenCentral()
    }
    dependencies{
        classpath 'org.apache.commons:commons-io:1.3.2'
    }
}

allprojects {
    repositories {
        mavenCentral()
    }

    configurations {
        // configuration that holds jars to copy into lib
        jopaPlugin
        jopaInlinePlugin
    }


    task jopa(dependsOn: 'compileJava') << {
        println sourceSets.main.output.classesDir
        println sourceSets.main.output.resourcesDir
        println buildDir

        println configurations.compile.collect { File file -> file }
        println configurations.jopaPlugin.collect { File file -> file }
    }

    task collectLists(dependsOn: 'compileJava') << {
        println ":${project.name}:collectLists"

        def dir
        def build = sourceSets.main.output.classesDir
        def beans = [:].withDefault {[]}
        def parent = new File(build, packageToPath(basePackage))
        if (parent.exists()) {
            beanTypes.each {
                dir = new File(parent,  it)
                if (dir.exists()) {
                    dir.eachFileRecurse (FileType.FILES) { file ->
                        def path = FilenameUtils.removeExtension(file.path)
                        def relativePath = getRelativePath(build, new File(path))
                        beans[it] << pathToPackage(relativePath)
                    }
                }
            }
        }

        new File("${buildDir}/jopa/descriptor.json") << JsonOutput.toJson(beans)
    }

    task copyClasses(type: Copy) {
        from(sourceSets.main.output.classesDir)
        into("${buildDir}/jopa/src")
    }

    task copyStatic(type: Copy) {
        from(sourceSets.main.output.resourcesDir)
        into("${buildDir}/jopa/static")
    }

}

task jopaCompile(dependsOn: ['compileJava', 'copyClasses', 'copyStatic', 'copyLibs', 'extractStaticFromPlugins', 'jopa'])

task jopaCompileSubs << {
    tasks.compileJava.execute()
    tasks.collectLists.execute()
    tasks.copyClasses.execute()
    tasks.copyStatic.execute()
    tasks.copyLibs.execute()
    tasks.extractStaticFromPlugins.execute()
}


task copyLibs(type: Copy) {
//        from configurations.compile
    from configurations.jopaPlugin
    into "${buildDir}/jopa/libs"
}

task extractStaticFromPlugins(type: Copy) {
    configurations.jopaPlugin.each { File file ->
        from (zipTree(file)) {
            include '/static/**'
        }
    }

    into "${buildDir}/jopa/static/plugins"
}




project.ext {
    springVersion = '3.2.4.RELEASE'
    basePackage = "ru.grails"
    beanTypes = ["controllers", "services", "conf"]
}

sourceSets {
    main {
        java {
            srcDir ("api/src")
            srcDir ("src")
        }

        resources {
            srcDir ("static")
        }
    }
}

dependencies {
    //add groovy support
    compile "org.springframework:spring-core:$springVersion"
    compile "org.springframework:spring-context:$springVersion"
    compile "org.jadira.usertype:usertype.jodatime:2.0"

    //add logging support
    //compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
    compile "ch.qos.logback:logback-classic:1.0.6"

    //test support
    testCompile "com.h2database:h2:1.3.163"
    testCompile "junit:junit:4.10"
    testCompile "org.springframework:spring-test:$springVersion"

    //html unit
    compile 'net.sourceforge.htmlunit:htmlunit:2.11'

    //add groovy support
    compile "org.springframework:spring-jdbc:$springVersion"
    compile "org.springframework:spring-tx:$springVersion"
    compile "org.springframework:spring-orm:$springVersion"
//    compile "org.hibernate:hibernate-core:$hibernateVersion"

    compile "commons-io:commons-io:2.4"

    //will come with all needed Spring dependencies such as spring-core and spring-beans
    compile "org.springframework:spring-orm:$springVersion"
    compile "org.springframework:spring-tx:$springVersion"

    //add hibernate
    compile "org.hibernate:hibernate-entitymanager:4.1.1.Final"
    compile "c3p0:c3p0:0.9.1.2"
    //compile "commons-dbcp:commons-dbcp:1.4"

    //postgresql driver
    compile "postgresql:postgresql:9.0-801.jdbc4"
    //data source
    compile "com.jolbox:bonecp:0.7.1.RELEASE"

    //json serialization
    compile group:'net.sf.json-lib', name:'json-lib', version:'2.4', classifier:'jdk15'

    compile 'org.apache.httpcomponents:httpclient:4.2.2'

    //utils
    compile 'com.google.guava:guava:14.0.1'
    compile 'org.atteo:evo-classindex:2.0'

//    jopaPlugin 'org.grails:grails-core:2.3.0'
    compile project(':subProject')
}



public static String packageToPath(String p) {
    return p.replace(".", "/");
}

public static String pathToPackage(String p) {
    return p.replace("/", ".");
}

public static String getRelativePath(File root, File full) {
    return root.toURI().relativize( full.toURI() ).toString()
}