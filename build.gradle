import groovy.io.FileType
import groovy.json.JsonOutput
import io.soyuz.build.BuildPaths
import io.soyuz.build.BuildUtils
import org.apache.commons.io.FilenameUtils

apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'

project.group = "ru.grails"
project.version = "1.0"

project.ext {
    springVersion = '3.2.4.RELEASE'
    basePackage = "ru.grails"
    beanTypes = ["controllers", "services", "conf"]
    plugins = []
    soyuzPaths = new BuildPaths(new File("${buildDir}/soyuz/"))
    descriptorFileName = "app.json"
}

buildscript{
    repositories{
        mavenCentral()
        mavenLocal()
        maven {
            url 'http://maven.springframework.org/snapshot/'
        }
    }
    dependencies{
        classpath 'org.apache.commons:commons-io:1.3.2'
        classpath 'io.soyuz:soyuz-build:1.0.SNAPSHOT'
    }
}

allprojects {
    apply plugin: 'java'

    sourceSets {
        main {
            java {
                srcDir ("src")
            }

            resources {
                srcDir ("resources")
            }
        }

        soyuzStatic {
            resources {
                srcDir ("static")
            }
        }
    }

    repositories {
        mavenCentral()
        mavenLocal().snapshotTimeout = 0
        maven {
            url 'http://maven.springframework.org/snapshot/'
        }
    }

    configurations {
        // configuration that holds jars to copy into lib
        soyuzBuild
    }

    task soyuzCollectLists(dependsOn: ['soyuzMkDirs', 'compileJava']) << {
        def build = sourceSets.main.output.classesDir
        def beans = [:].withDefault {[]}
        def parent = new File(build, BuildUtils.packageToPath(basePackage))
        if (parent.exists()) {
            beanTypes.each {
                def dir = new File(parent,  it)
                if (dir.exists()) {
                    dir.eachFileRecurse (FileType.FILES) { file ->
                        def path = FilenameUtils.removeExtension(file.path)
                        def relativePath = BuildUtils.getRelativePath(build, new File(path))
                        beans[it] << BuildUtils.pathToPackage(relativePath)
                    }
                }
            }
        }

        new File(soyuzPaths.plugins, descriptorFileName) << JsonOutput.toJson(beans)
    }

    task soyuzBuildClasses(type: Copy) {
        into soyuzPaths.classes
        from sourceSets.main.output
    }
}

subprojects {

    project.ext {
        descriptorFileName = "plugin.${project.name}.json"
    }

    task soyuzBuildStatic(type: Copy) {
        into soyuzPaths.getPluginStatic(project.name)
        from project.sourceSets.soyuzStatic.allSource
    }

    task soyuzMkDirs //do nothing in subprojects
}

task soyuzBuildStatic(type: Copy) {
    into soyuzPaths.static
    from project.sourceSets.soyuzStatic.allSource
}

task soyuzMkDirs << {
    soyuzPaths.plugins.mkdirs()
}

task soyuzCopyLibs(type: Copy) {
    from configurations.compile
    into soyuzPaths.libs
    exclude '**/*.zip'
}

task soyuzCopyBuildDependencies(type: Copy) {
    from configurations.soyuzBuild
    into soyuzPaths.build

    rename { String fileName ->
        if (fileName.startsWith("springloaded")) {
            return "springloaded.jar"
        } else {
            return fileName
        }
    }
}

/**
 * This is support task. Don't call it manually! Instead call unpackPlugins
 * http://gradle.1045684.n5.nabble.com/dependsOn-and-configurations-td5145208.html
 */
task soyuzConfigurePluginsToUnpack {
    dependsOn configurations.compile
    doLast {
        configurations.compile.each { file ->
            if (file.name.endsWith(".zip")) {
                soyuzUnpackPlugins.from(zipTree(file))
            }
        }
    }
}

task soyuzUnpackPlugins(type: Copy, dependsOn: soyuzConfigurePluginsToUnpack) {
    into soyuzPaths.root
}

task soyuzZipPlugin(type:Zip, dependsOn: 'soyuzCollectLists') {
    into(soyuzPaths.getRelativePluginStatic(project.name)) {
        from sourceSets.soyuzStatic.allSource
    }

    into(soyuzPaths.relativePlugins) {
        from new File(soyuzPaths.plugins, "app.json")
        rename { String fileName ->
            "descriptor.${project.name}.json"
        }
    }
}

task soyuzBuildApp(dependsOn: [allprojects.soyuzCollectLists, allprojects.soyuzBuildClasses, allprojects.soyuzBuildStatic, soyuzCopyLibs, soyuzCopyBuildDependencies, soyuzUnpackPlugins])

task soyuzRunApp(dependsOn: 'soyuzBuildApp') << {
    Thread.start {
        tasks.soyuzDoRunApp.execute()
    }

    while(true) {
        tasks.compileJava.execute()
        tasks.soyuzBuildClasses.execute()

        sleep(5*1000)
    }
}

task soyuzDoRunApp(type: JavaExec) {
    classpath soyuzPaths.libs.listFiles(), soyuzPaths.classes
    jvmArgs "-javaagent:${new File(soyuzPaths.build, "springloaded.jar").absolutePath}"
    main = "io.soyuz.app.StartWithReloading"
}

dependencies {
    compile project(':subProject')

    //framework dependencies
    compile "io.soyuz:soyuz-app:1.0.SNAPSHOT"
    compile "io.soyuz:soyuz-build:1.0.SNAPSHOT"
    soyuzBuild "com.springsource.springloaded:springloaded-core:1.1.1.BUILD-SNAPSHOT"

    //plugin
    //compile "ru.grails.plugins:spring-games-plugin:1.0"
}

publishing {
    publications {
        def srcArtifactId = "${project.name}-src"

        impl(MavenPublication) {
            groupId 'ru.grails.plugins'
            artifactId srcArtifactId

            from components.java
        }
        api(MavenPublication) {
            groupId 'ru.grails.plugins'

            artifact soyuzZipPlugin

            //adding jar as dependency... not the best solution
            pom.withXml {
                def dependency = asNode().appendNode('dependencies').appendNode('dependency')
                dependency.appendNode('groupId', 'ru.grails.plugins')
                dependency.appendNode('artifactId', srcArtifactId)
                dependency.appendNode('version', project.version)
                dependency.appendNode('scope', 'runtime')
            }
        }
    }
    repositories {
        maven {
            url "$buildDir/repo" // change to point to your repo, e.g. http://my.org/repo
        }
    }
}