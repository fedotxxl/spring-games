import groovy.io.FileType
import groovy.json.JsonOutput
import org.apache.commons.io.FilenameUtils

apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'

project.group = "ru.grails"
project.version = "1.0"

project.ext {
    springVersion = '3.2.4.RELEASE'
    basePackage = "ru.grails"
    beanTypes = ["controllers", "services", "conf"]
    plugins = []
    jopaBuild = new File("${buildDir}/jopa/")
    jopaStatic = new File(jopaBuild, "static")
    jopaClasses = new File(jopaBuild, "classes")
}

buildscript{
    repositories{
        mavenCentral()
    }
    dependencies{
        classpath 'org.apache.commons:commons-io:1.3.2'
    }
}

allprojects {
    apply plugin: 'java'

    sourceSets {
        main {
            java {
                srcDir ("src")
            }

            resources {
                srcDir ("resources")
            }
        }

        assets {
            resources {
                srcDir ("static")
            }
        }
    }

    repositories {
        mavenCentral()
        maven {
            url 'http://maven.springframework.org/snapshot/'
        }
    }

    configurations {
        // configuration that holds jars to copy into lib
        jopaPlugin
        jopaInlinePlugin
    }


    task jopa(dependsOn: 'compileJava') << {
        println sourceSets.main.output.classesDir
        println sourceSets.main.output.resourcesDir
        println buildDir

        println configurations.compile.collect { File file -> file }
        println configurations.jopaPlugin.collect { File file -> file }
    }

    task collectLists(dependsOn: 'compileJava') << {
        println ":${project.name}:collectLists"

        def dir
        def build = sourceSets.main.output.classesDir
        def beans = [:].withDefault {[]}
        def parent = new File(build, packageToPath(basePackage))
        if (parent.exists()) {
            beanTypes.each {
                dir = new File(parent,  it)
                if (dir.exists()) {
                    dir.eachFileRecurse (FileType.FILES) { file ->
                        def path = FilenameUtils.removeExtension(file.path)
                        def relativePath = getRelativePath(build, new File(path))
                        beans[it] << pathToPackage(relativePath)
                    }
                }
            }
        }

        def path = new File("${buildDir}/jopa/plugins/")
        path.mkdirs();
        new File(path, "descriptor.${project.name}.json") << JsonOutput.toJson(beans)
    }

    task copyClasses(type: Copy) {
        from(sourceSets.main.output.classesDir)
        into("${buildDir}/jopa/src")
    }

    task copyStatic(type: Copy) {
        from(sourceSets.main.output.resourcesDir)
        into("${buildDir}/jopa/static")
    }

    task buildClasses(type: Copy) {
        into jopaClasses
        from sourceSets.main.output
    }
}

configurations {
    jopaBuildConfiguration
}

subprojects {
    task buildStatic(type: Copy) {
        into new File(jopaStatic, project.name)
        from project.sourceSets.assets.allSource
    }
}

task jopaCompile(dependsOn: ['compileJava', 'copyClasses', 'copyStatic', 'copyLibs', 'extractStaticFromPlugins', 'jopa'])

task jopaCompileSubs << {
    tasks.compileJava.execute()
    tasks.collectLists.execute()
    tasks.copyClasses.execute()
    tasks.copyStatic.execute()
    tasks.copyLibs.execute()
    tasks.extractStaticFromPlugins.execute()
}


task copyLibs(type: Copy) {
//        from configurations.compile
    from configurations.jopaPlugin
    into "${buildDir}/jopa/libs"
}

task extractStaticFromPlugins(type: Copy) {
//    configurations.jopaPlugin.each { File file ->
//        from (zipTree(file)) {
//            include '/static/**'
//        }
//    }
//
//    into "${buildDir}/jopa/static/plugins"
}

dependencies {
    //add groovy support
    compile "org.springframework:spring-core:$springVersion"
    compile "org.springframework:spring-context:$springVersion"
    compile "org.jadira.usertype:usertype.jodatime:2.0"

    //add logging support
    //compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
    compile "ch.qos.logback:logback-classic:1.0.6"

    //test support
    testCompile "com.h2database:h2:1.3.163"
    testCompile "junit:junit:4.10"
    testCompile "org.springframework:spring-test:$springVersion"

    //html unit
    compile 'net.sourceforge.htmlunit:htmlunit:2.11'

    //add groovy support
    compile "org.springframework:spring-jdbc:$springVersion"
    compile "org.springframework:spring-tx:$springVersion"
    compile "org.springframework:spring-orm:$springVersion"
//    compile "org.hibernate:hibernate-core:$hibernateVersion"

    compile "commons-io:commons-io:2.4"

    //will come with all needed Spring dependencies such as spring-core and spring-beans
    compile "org.springframework:spring-orm:$springVersion"
    compile "org.springframework:spring-tx:$springVersion"

    //add hibernate
    compile "org.hibernate:hibernate-entitymanager:4.1.1.Final"
    compile "c3p0:c3p0:0.9.1.2"
    //compile "commons-dbcp:commons-dbcp:1.4"

    //postgresql driver
    compile "postgresql:postgresql:9.0-801.jdbc4"
    //data source
    compile "com.jolbox:bonecp:0.7.1.RELEASE"

    //json serialization
    compile group:'net.sf.json-lib', name:'json-lib', version:'2.4', classifier:'jdk15'

    compile 'org.apache.httpcomponents:httpclient:4.2.2'

    //utils
    compile 'com.google.guava:guava:14.0.1'
    compile 'org.atteo:evo-classindex:2.0'

//    jopaPlugin 'org.grails:grails-core:2.3.0'
//    jopaPlugin project(':subProject')
    compile project(':subProject')

    jopaBuildConfiguration "com.springsource.springloaded:springloaded-core:1.1.1.BUILD-SNAPSHOT"
}


task jopaConfig() << {
//    println configurations.jopaPlugin.dependencies.files.collect { it }
}

def getPlugins(def pResolvedDependency) {
    pResolvedDependency.children.each{
        getPlugins(it)
    }

    println pResolvedDependency.moduleGroup

    if(pResolvedDependency.moduleGroup in ["ru.grails.plugin", "joda-time"]) {
        plugins << pResolvedDependency
        println 'adding'
    }
}

task printPlugins() << {
//    println "  Project:" + project.name
//    project.configurations.each { conf ->
//        println "    Configuration: ${conf.name}"
//        conf.allDependencies.each { dep ->
//            println "      ${dep.group}:${dep.name}:${dep.version}"
//        }
//    }


//    configurations.runtime.resolvedConfiguration.firstLevelModuleDependencies.each{directDep ->
//        getPlugins(directDep)
//    }

    println configurations.runtime.resolvedConfiguration.resolvedArtifacts.findAll {
        println "${it.name} ${it.moduleVersion.id}"
    }

    println plugins
}

task zipPlugin(type:Zip, dependsOn: 'collectLists') {
    into("/static/plugins/${project.name}") {
        from sourceSets.assets.allSource
    }

    into("/plugins") {
        from new File("${buildDir}/jopa/plugins/descriptor.${project.name}.json")
    }
}

task buildStatic(type: Copy) {
    into jopaStatic
    from project.sourceSets.assets.allSource
}

task copySpringLoaded(type: Copy) {
    from configurations.jopaBuildConfiguration
    into "${jopaBuild}/build"

    rename { String fileName ->
        if (fileName.startsWith("springloaded")) {
            return "springloaded.jar"
        } else {
            return fileName
        }
    }
}

publishing {
    publications {
        def srcArtifactId = "${project.name}-src"

        impl(MavenPublication) {
            //groupId 'ru.grails.plugins'
            //artifactId srcArtifactId

            from components.java
        }
        api(MavenPublication) {
            //groupId 'ru.grails.plugins'

            artifact zipPlugin

            //adding jar as dependency... not the best solution
            pom.withXml {
                def dependency = asNode().appendNode('dependencies').appendNode('dependency')
                dependency.appendNode('groupId', 'ru.grails.plugins')
                dependency.appendNode('artifactId', srcArtifactId)
                dependency.appendNode('version', project.version)
                dependency.appendNode('scope', 'runtime')
            }
        }
    }
    repositories {
        maven {
            url "$buildDir/repo" // change to point to your repo, e.g. http://my.org/repo
        }
    }
}


public static String packageToPath(String p) {
    return p.replace(".", "/");
}

public static String pathToPackage(String p) {
    return p.replace("/", ".");
}

public static String getRelativePath(File root, File full) {
    return root.toURI().relativize( full.toURI() ).toString()
}